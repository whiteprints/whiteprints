# SPDX-FileCopyrightText: Â© 2024 The "Whiteprints" contributors <whiteprints@pm.me>
#
# SPDX-License-Identifier: GPL-3.0-or-later

[tox]
min_version = 4.4.0
requires =
    tox-uv>=1.11.3
    uv>=0.4.12
labels =
    test = py{39,310,311,312,313}-test
    coverage = py{39,310,311,312,313}-test,coverage-combine,coverage
    BOM-vulnerabilities = py{39,310,311,312,313}-BOM-vulnerabilities,
    BOM = BOM-licenses,py{39,310,311,312,313}-BOM-vulnerabilities,
    check-supply-chain = py{39,310,311,312,313}-check-supply-chain
env_list =
    pre-commit
    lint
    check-types
    check-vulnerabilities
    check-exceptions
    check-code-maintainability
    py{39,310,311,312,313}-test
    coverage-combine
    coverage
    BOM-licenses
    py{39,310,311,312,313}-BOM-vulnerabilities
    check-documentation-links
    build-documentation
    distribute

[dev]
skip_install = true
deps =
    beartype
    hypothesis
    pylint
    pytest
    pytest-html
    pytest-md-report
    pytest-cov
    pytest-randomly
    pytest-sugar
    pytest-xdist
    xdoctest
base_python = 3.9

[testenv]
skip_install = true
constrain_package_deps = true
use_frozen_constraints = True
set_env =
    UV_PROJECT_ENVIRONMENT={env_dir}
uv_bin =
    uv --no-progress
uvx_bin =
    uvx --quiet --no-progress
uv_export_requirements =
    {[testenv]uv_bin} export \
        --quiet --python={env_python} \
        --frozen --no-dev --no-emit-project \
        --output-file {env_dir}{/}requirements.txt
uv_install_deps =
    {[testenv]uv_export_requirements}
    {[testenv]uv_bin} \
        pip install \
        --quiet --python={env_python} \
        --require-hashes --verify-hashes --strict \
        --requirement {env_dir}{/}requirements.txt
uv_install_project =
    {[testenv]uv_install_deps}
    {[testenv]uv_bin} \
        pip install \
        --no-cache \
        --python={env_python} \
        --quiet --no-deps {tox_root}

[testenv:py{39,310,311,312,313}-test]
description = run the test suite under {base_python}
deps =
    {[dev]deps}
commands_pre =
    {[testenv]uv_install_project}
commands =
    pytest {tty:--color=yes} {posargs: \
        --html={work_dir}{/}test_report.html \
        --cov-config={tox_root}{/}.coveragerc \
        --basetemp={env_tmp_dir} \
        --junitxml={work_dir}{/}junit.{envname}.xml \
        --md-report-output {work_dir}{/}test_report.md \
        {tox_root}{/}tests {tox_root}{/}src
    }
set_env=
    {[testenv]set_env}
    PYTHONOPTIMIZE=0
    COVERAGE_FILE={work_dir}{/}.coverage.{on_platform}-{envname}

[testenv:test-report]
description = open pytest report
commands =
    {env:BROWSER} {work_dir}{/}test_report.html
allowlist_externals =
    {env:BROWSER}
pass_env =
    BROWSER=firefox

[testenv:pre-commit]
description = pre-commit checks and fixes
commands =
    {[testenv]uvx_bin} \
        pre-commit run {posargs: \
            --all-files --hook-stage=manual --show-diff-on-failure \
        }
pass_env =
    HOMEPATH
    PROGRAMDATA
    PRE_COMMIT_COLOR={tty:always:auto}

[testenv:lint]
description = static code analysis
base_python = {[dev]base_python}
deps =
    {[dev]deps}
commands_pre =
    {[testenv]uv_install_deps}
commands =
    pylint {tty:--output-format=colorized} {posargs: \
        --rcfile .pylintrc \
        {tox_root}{/}tests {tox_root}{/}docs \
        {tox_root}{/}src \
    }

[testenv:check-types]
description = check the types
base_python = {[dev]base_python}
deps =
    {[dev]deps}
commands_pre =
    {[testenv]uv_install_deps}
commands =
    {[testenv]uvx_bin} \
         pyright {posargs: \
            --pythonpath {env_python} --project .pyrightconfig_tox.json \
        }

[testenv:BOM-licenses]
description = generate the software bill of materials under {base_python}
commands_pre =
    mkdir -p {tox_root}{/}BOM
commands =
    {[testenv]uvx_bin} \
        reuse spdx \
        --creator-organization "whiteprints <>" \
        --output {tox_root}{/}BOM{/}project_licenses.spdx {posargs}
allowlist_externals =
    mkdir

[testenv:py{39,310,311,312,313}-BOM-vulnerabilities]
description = generate the software bill of materials under {base_python}
commands_pre =
    mkdir -p {tox_root}{/}BOM{/}vulnerabilities-{base_python}
    {[testenv]uv_bin} export \
        --quiet --python={env_python} \
        --frozen --no-dev --no-emit-project \
        --output-file {tox_root}{/}BOM{/}vulnerabilities-{base_python}{/}requirements.txt
commands =
    {[testenv]uvx_bin} \
        cyclonedx-py requirements \
        --outfile {tox_root}{/}BOM{/}vulnerabilities-{base_python}{/}project_dependencies.cdx.json \
        {tox_root}{/}BOM{/}vulnerabilities-{base_python}{/}requirements.txt
    {[testenv]uvx_bin} pip-audit \
        --disable-pip --require-hashes \
        --requirement {tox_root}{/}BOM{/}vulnerabilities-{base_python}{/}requirements.txt \
        --format cyclonedx-json \
        --output {tox_root}{/}BOM{/}vulnerabilities-{base_python}{/}vulnerabilities.cdx.json
allowlist_externals =
    mkdir

[testenv:coverage-combine]
description = combine  coverage
change_dir = {work_dir}
deps =
    coverage
depends =
    pre-commit
    py{39,310,311,312,313}-test
commands =
    coverage \
        combine --rcfile {tox_root}{/}.coveragerc {posargs: \
            --keep \
        }
set_env =
    {[testenv]set_env}
    COVERAGE_FILE=.coverage

[testenv:coverage-report]
description = report coverage to various file
base_python = {[dev]base_python}
deps =
    coverage
depends =
    coverage-combine
commands =
    - coverage html \
        --rcfile {tox_root}{/}.coveragerc \
        --directory {tox_root}{/}coverage{/}htmlcov \
        --data-file {work_dir}{/}.coverage
    - coverage lcov \
        --rcfile {tox_root}{/}.coveragerc \
        -o {tox_root}{/}coverage{/}coverage.lcov \
        --data-file {work_dir}{/}.coverage
    - coverage xml \
        --rcfile {tox_root}{/}.coveragerc \
        -o {tox_root}{/}coverage{/}coverage.xml \
        --data-file {work_dir}{/}.coverage

[testenv:coverage]
description = display coverage
base_python = {[dev]base_python}
depends =
    coverage-combine
deps =
    coverage
commands =
    coverage report \
        --rcfile {tox_root}{/}.coveragerc \
        --data-file {work_dir}{/}.coverage \
        --skip-covered

[testenv:autofix]
description = autofix format and syntax
commands =
    - {[testenv]uvx_bin} \
        pre-commit \
        run --all-files trailing-whitespace {posargs: \
              --show-diff-on-failure \
        }
    - {[testenv]uvx_bin} \
        pre-commit \
        run --all-files pyproject-fmt {posargs: \
            --show-diff-on-failure \
        }
    - {[testenv]uvx_bin} \
        pre-commit \
        run --all-files ruff-format {posargs: \
            --show-diff-on-failure \
        }
    - {[testenv]uvx_bin} \
        pre-commit \
        run --all-files ruff-fix {posargs: \
            --show-diff-on-failure \
        }
pass_env =
    HOMEPATH
    PROGRAMDATA
    PRE_COMMIT_COLOR={tty:always:auto}

[testenv:check-vulnerabilities]
description = check for vulnerabilities
base_python = {[dev]base_python}
depends =
    pre-commit
deps =
    bandit
commands =
    bandit {posargs: \
        --recursive --configfile=bandit.yaml \
        src tests docs \
    }

[testenv:check-exceptions]
description = check for vulnerabilities
base_python = {[dev]base_python}
depends =
    pre-commit
deps =
    tryceratops
commands =
    tryceratops {posargs: \
        {tox_root}{/}tests {tox_root}{/}docs \
        {tox_root}{/}src \
    }

[testenv:audit-code-maintainability]
description = audit the code maintainability
base_python = {[dev]base_python}
depends =
    pre-commit
deps =
    radon
commands =
    radon {posargs: \
        mi \
        {tox_root}{/}tests{/} {tox_root}{/}docs{/} \
        {tox_root}{/}src \
    }

[testenv:check-code-maintainability]
description = check the code maintainability
base_python = {[dev]base_python}
depends =
    pre-commit
deps =
    xenon
commands =
    xenon {posargs: \
        --max-average=A --max-modules=A --max-absolute=A \
        {tox_root}{/}tests {tox_root}{/}docs \
        {tox_root}{/}src \
    }

[testenv:check-license]
description = check the project licence
commands =
    {[testenv]uvx_bin} \
        pre-commit run \
        reuse
pass_env =
    HOMEPATH
    PROGRAMDATA
    PRE_COMMIT_COLOR={tty:always:auto}

[testenv:py{39,310,311,312,313}-check-supply-chain]
description = check the supply-chain under {base_python}
commands =
    {[testenv]uv_bin} \
        export \
        --quiet --python={env_python} \
        --frozen --no-dev --no-emit-project \
        --output-file {env_tmp_dir}{/}requirements.txt
    {[testenv]uvx_bin} \
        pip-audit \
        --strict --disable-pip --require-hashes \
        --requirement {env_tmp_dir}{/}requirements.txt

[testenv:print-dependency-tree]
description = print the dependency tree.
base_python = {[dev]base_python}
change_dir = {env_dir}
commands =
    {[testenv]uv_bin} \
        tree \
        --python={env_python} \
        --frozen {posargs: --universal}

[testenv:distribute]
description = create a distribution of your package (wheel and sdist).
base_python = {[dev]base_python}
depends =
    pre-commit
commands =
    {[testenv]uv_bin} \
        build \
        --python={env_python} \
        --no-progress {posargs}

[testenv:build-documentation]
description = build the documentation
base_python = {[dev]base_python}
depends =
    pre-commit
commands_pre =
    {[testenv]uv_install_project}
deps =
    pydata-sphinx-theme
    myst-parser[linkify]
    sphinx
    sphinx-click
    sphinx-autoapi
    sphinx-copybutton
    sphinxcontrib-napoleon
    sphinxcontrib-spelling
commands =
    sphinx-build {tty:--color} {posargs: \
        --jobs auto \
        --builder html \
        --fail-on-warning \
        --keep-going {tox_root}{/}docs {tox_root}{/}docs_build \
    }

[testenv:serve-documentation]
description = build and display the documentation. Use the environment variable BROWSER to change the browser used to display the documentation.
base_python = {[dev]base_python}
depends =
    pre-commit
deps =
    {[testenv:build-documentation]deps}
    sphinx-autobuild
commands_pre =
    {[testenv]uv_install_project}
commands =
    sphinx-autobuild {tty:--color} {posargs: \
        --jobs auto \
        --keep-going --port 0 --open-browser \
        {tox_root}{/}docs {env_tmp_dir} \
    }
pass_env =
    BROWSER
    DISPLAY

[testenv:check-documentation-links]
description = check the documentation links
base_python = {[dev]base_python}
depends =
    pre-commit
commands_pre =
    {[testenv]uv_install_project}
deps =
    {[testenv:build-documentation]deps}
commands =
    sphinx-build {tty:--color} {posargs: \
        --jobs auto \
        --builder linkcheck \
        --fail-on-warning \
        --keep-going {tox_root}{/}docs {tox_root}{/}docs_build \
    }

[testenv:translation-extract]
description = extrac the translation template files from sources
deps =
    Babel
commands =
    pybabel \
        --quiet extract --omit-header --sort-by-file \
        --output {tox_root}{/}src{/}whiteprints{/}locale{/}base.pot \
        {tox_root}{/}src

[testenv:translation-init]
description = create new message catalogs from a POT file
deps =
    Babel
commands =
    pybabel \
        --quiet init --omit-header \
        --input-file {tox_root}{/}src{/}whiteprints{/}locale{/}base.pot \
        --output-dir {tox_root}{/}src{/}whiteprints{/}locale

[testenv:translation-update]
description = update existing message catalogs from a POT file
deps =
    Babel
commands =
    pybabel \
        --quiet update --omit-header \
        --input-file {tox_root}{/}src{/}whiteprints{/}locale{/}base.pot \
        --output-dir {tox_root}{/}src{/}whiteprints{/}locale

[testenv:clean]
description = clean all temporary files
deps =
    pyclean
commands =
    pyclean {posargs}

[testenv:install-dev-tools]
description = Install the development tools
commands =
    {[testenv]uv_bin} \
        tool install \
        --upgrade tox \
        --with tox-uv
    {[testenv]uv_bin} \
        tool install \
        --upgrade pip-audit
    {[testenv]uv_bin} \
        tool install \
        --upgrade pre-commit \
        --with pre-commit-uv
    {[testenv]uv_bin} \
        tool install \
        --upgrade pyright
    {[testenv]uv_bin} \
        tool install \
        --upgrade reuse
    {[testenv]uv_bin} \
        tool install \
        --upgrade ruff
    {[testenv]uv_bin} \
        tool install \
        --upgrade cyclonedx-bom

[testenv:build-container]
description = build the project container
commands =
    {[testenv]uv_bin}  \
        run {tox_root}/scripts/build_container_image.py {posargs:all}
