# SPDX-FileCopyrightText: Â© 2024 The "Whiteprints" contributors <whiteprints@pm.me>
#
# SPDX-License-Identifier: GPL-3.0-or-later

ARG PYTHON_VERSION=3.13.0
ARG BASE_OS=alpine3.20
ARG DIGEST="sha256:81362dd1ee15848b118895328e56041149e1521310f238ed5b2cdefe674e6dbf"

ARG UV_COMPILE_BYTECODE=1
ARG PYTHONDONTWRITEBYTECODE=1
ARG PYTHONBUFFERED=1
ARG TAG=${PYTHON_VERSION}-${BASE_OS}${DIGEST:+@${DIGEST}}

ARG VIRTUAL_ENV=/opt/venv

# Use a multi-stage build to reduce the size of the final image.
#   This example is optimized to reduce final image size rather than for
#   simplicity.
# Using a -slim image also greatly reduces image size.
# It is possible to use -alpine images instead to further reduce image size,
# but this comes with several important caveats.
#   - Alpine images use MUSL rather than GLIBC (as used in the default
#   Debian-based images).
#   - Most Python packages that require C code are tested against GLIBC, so
#   there could be subtle errors when using MUSL.
#   - These Python packages usually only provide binary wheels for GLIBC, so
#   the packages will need to be recompiled fully within the container images,
#   increasing build times.
ARG UV_VERSION=0.4.20
ARG UV_DIGEST="sha256:4e7932d37d1156f8f7be5992363f1307160aff4b3031ee99b03155df78900575"
ARG UV_TAG=${UV_VERSION}${UV_DIGEST:+@${UV_DIGEST}}
ARG UV_BIN="/usr/local/bin"

FROM ghcr.io/astral-sh/uv:${UV_TAG} AS uv_image

ARG TAG

FROM docker.io/python:${TAG} AS python_builder

# Install any system dependencies required to build wheels, such as C
# compilers or system packages For example:
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    apk add --update git

ARG UV_BIN

COPY --from=uv_image /uv ${UV_BIN}/uv

ARG UV_COMPILE_BYTECODE
ARG PYTHONDONTWRITEBYTECODE
ARG PYTHONBUFFERED
ARG VIRTUAL_ENV

ENV UV_LINK_MODE=copy \
    UV_PYTHON_DOWNLOADS=never \
    UV_PROJECT_ENVIRONMENT=${VIRTUAL_ENV}
RUN ${UV_BIN}/uv venv \
        --python="/usr/local/bin/python" \
        --relocatable \
        ${VIRTUAL_ENV}

# Copy in project dependency specification.
ARG WORKDIR=/src
WORKDIR ${WORKDIR}

# Install the project dependencies
COPY pyproject.toml *.lock ./
RUN --mount=type=cache,target=/root/.cache/uv \
    set -ex && \
    ${UV_BIN}/uv export \
        --python="/usr/local/bin/python" \
        --format="requirements-txt" \
        --output-file requirements.txt \
        --all-extras \
        --frozen \
        --no-dev \
        --no-emit-project && \
    ${UV_BIN}/uv pip install \
        --python="/usr/local/bin/python" \
        --require-hashes \
        --verify-hashes \
        --no-break-system-packages \
        --requirement requirements.txt

# Copy in source files.
COPY README.md hatch.toml hatch_build.py ./
COPY LICENSES LICENSES/
COPY src src/
COPY .git .git/

# Manually build/install the package.
RUN --mount=type=cache,target=/root/.cache/uv \
    set -ex && \
    ${UV_BIN}/uv pip install \
        --python="/usr/local/bin/python" \
        --no-cache \
        --no-break-system-packages \
        --no-deps \
        .

## Final Image
# The image used in the final image MUST match exactly to the python_builder
# image.
FROM docker.io/python:${TAG} AS python_runner

# For Python applications that are not installable libraries, you may need to
# copy in source files here in the final image rather than in the
# python_builder image.

# Copy and activate pre-built virtual environment.
ARG VIRTUAL_ENV
COPY --from=python_builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}
ENV PATH="${VIRTUAL_ENV}/bin:${PATH}"

# Give access to the entire home folder to the new user so that files and
# folders can be written there. Some packages such as matplotlib, want to write
# to the home folder.
USER nobody

ARG HOME="/app"
ENV HOME=${HOME}
WORKDIR ${HOME}

ARG PYTHONDONTWRITEBYTECODE
ARG PYTHONBUFFERED
ENV PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE} \
    PYTHONBUFFERED=${PYTHONBUFFERED}

ENTRYPOINT ["whiteprints"]

ARG PYTHON_VERSION
ARG BASE_OS
ARG DIGEST
ARG BUILD_DATE
ARG VERSION
ARG REVISION
ARG TAG

LABEL org.opencontainers.image.authors='The "Whiteprints" contributors <whiteprints@pm.me>' \
      org.opencontainers.image.documentation='https://readthedocs.org/projects/whiteprints' \
      org.opencontainers.image.source='https://github.com/whiteprints/whiteprints' \
      org.opencontainers.image.description='A Copier-based cookiecutter for creating Python projects managed by uv.' \
      org.opencontainers.image.vendor='whiteprints' \
      org.opencontainers.image.licenses='GPL-3.0-or-later' \
      org.opencontainers.image.version=${VERSION} \
      org.opencontainers.image.revision=${REVISION} \
      org.opencontainers.image.created=${BUILD_DATE} \
      org.opencontainers.image.title='whiteprints' \
      org.opencontainers.image.description='A Copier-based cookiecutter for creating Python projects managed by uv.' \
      org.opencontainers.image.ref.name=${TAG} \
      org.opencontainers.image.base.name='docker.io/python:'${TAG} \
      org.opencontainers.image.base.digest=${DIGEST}
