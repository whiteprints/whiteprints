# SPDX-FileCopyrightText: Â© 2024 The "Whiteprints" contributors <whiteprints@pm.me>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Upload Release Artifacts

on:
  push:
    # branches to consider in the event; optional, defaults to all
    tags:
      - 'v[0-9]+.[0-9]+.[0-9].post'
      - 'v[0-9]+.[0-9]+.[0-9].post[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9].post.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-pre-alpha'
      - 'v[0-9]+.[0-9]+.[0-9]+-pre-alpha[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-pre-alpha.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-pre-alpha[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-planning'
      - 'v[0-9]+.[0-9]+.[0-9]+-planning[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-planning.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-planning[0-9]+.[0-9]+'

jobs:
  release-package:
    name: Upload wheel and sdist
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Try to download built artifact
        id: download-artifact
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
        with:
          name: Packages
          path: dist
        continue-on-error: true
      - name: Build and Test Workflow (fallback if no artifacts available)
        if: steps.download-artifact.outcome == 'failure'
        uses: ./.github/workflows/build_and_test.yml
        permissions:
          attestations: write
          id-token: write
        id: build_and_test
      - name: Retry downloading artifact after fallback build
        if: steps.download-artifact.outcome == 'failure'
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
        with:
          name: Packages
          path: dist
      - name: Upload dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} dist/** --clobber
    outputs:
      python-versions: ${{ steps.build_and_test.outputs.python-versions }}

  docs-generation:
    name: Upload documentation
    runs-on: ubuntu-latest
    needs:
      - release-package
    environment:
      name: artifacts
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Try to download built artifact
        id: download-artifact
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
        with:
          name: documentation
      - name: Upload docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} documentation.zip* --clobber

  sbom-vulnerabilities-generation:
    name: Generate SBOM under Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: release-package
    environment:
      name: artifacts
    strategy:
      matrix:
        python: ${{ fromJson(needs.release-package.outputs.python-versions) }}
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@b5f58b2abc5763ade55e4e9d0fe52cd1ff7979ca # v5
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: SBOM generation
        run: |
          just SBOM-vulnerabilities ${{ matrix.python }} "highest"
      - name: Upload SBOM vulnerabilities
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: SBOM-vulnerabilities-${{ matrix.os }}-${{ matrix.python }}
          path: SBOM/
          overwrite: true

  sbom-publication:
    name: Publish SBOM
    runs-on: ubuntu-latest
    environment:
      name: artifacts
    needs:
      - sbom-vulnerabilities-generation
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@b5f58b2abc5763ade55e4e9d0fe52cd1ff7979ca # v5
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Download coverage data
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
        with:
          pattern: SBOM-vulnerabilities-*
          merge-multiple: true
          path: SBOM/
      - name: SBOM generation
        run: |
          just SBOM-licenses
      - name: Create SBOM Archive
        shell: python
        run: |
          import zipfile, os
          from pathlib import Path

          with zipfile.ZipFile('SBOM.zip', 'w') as zipf:
              for f in Path('SBOM').rglob('*'):
                  zipf.write(f, f.relative_to('SBOM'))
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4 # v2
        with:
          subject-path: SBOM.zip*
      - name: Upload SBOM as Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} SBOM.zip* --clobber

  publish-pypi:
    name: Publish Package
    runs-on: ubuntu-latest
    environment:
      name: "${{ (contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-pre-alpha') || contains(github.ref, '-planning')) && 'publish_testpypi' || 'publish_pypi' }}"
    needs:
      - release-package
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - name: Download built packages from the build-package job
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
        with:
          name: Packages
          path: dist
      # Publish to TestPyPI for pre-releases (alpha, beta, pre-alpha, planning)
      - name: Publish to TestPyPI
        if: "contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-pre-alpha') || contains(github.ref_name, '-planning')"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: 'https://test.pypi.org/legacy/'
          attestations: true
          print-hash: true
      # Publish to PyPI for stable releases, releases candidates and
      # post-releases
      - name: Publish to PyPI
        if: "!contains(github.ref_name, '-alpha') && !contains(github.ref_name, '-beta') && !contains(github.ref_name, '-pre-alpha') && !contains(github.ref_name, '-planning')"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: 'https://upload.pypi.org/legacy/'
          attestations: true
          print-hash: true

  container-deploy:
    name: Build and Push Container
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    needs:
      - release-package
    runs-on: ubuntu-latest
    environment:
      name: "${{ (contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-pre-alpha') || contains(github.ref, '-planning')) && 'publish_testghcr' || 'publish_ghcr' }}"
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    strategy:
      matrix:
        image:
          - name: alpine
          - name: debian
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Download built packages from the build-package job
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
        with:
          name: Packages
          path: dist
      - name: Set up QEMU
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3
      - name: Set up Docker Metadata
        id: docker-meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=
            suffix=-${{ matrix.image.name }}
          tags: |
            type=pep440,pattern={{ version }},event=tag
            type=ref,event=tag
            type=sha
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
      - name: Build and Push Container
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # v6
        id: build-and-push
        with:
          context: .
          file: ./container/Containerfile.${{ matrix.image.name }}
          tags: |
            ${{ steps.docker-meta.outputs.tags }}
          annotations: ${{ steps.docker-meta.outputs.annotations }}
          build-args: |
            VERSION=${{ steps.docker-meta.outputs.version }}
            REVISION=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          push: true
          sbom: true
          provenance: mode=max
          cache-from: type=local,src=~/.docker/buildx-cache
          cache-to: type=local,dest=~/.docker/buildx-cache
