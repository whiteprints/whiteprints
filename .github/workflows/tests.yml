# SPDX-FileCopyrightText: Â© 2024 The "Whiteprints" contributors <whiteprints@pm.me>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Tests
on:
  workflow_dispatch:
  push:
    branches: ["main"]
    tags-ignore: ["**"]
  pull_request:

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-package:
    name: Build and inspect package
    runs-on: ubuntu-latest
    environment:
      name: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Build and inspect package
        id: baipp
        uses: hynek/build-and-inspect-python-package@14c7e53f5d033cfa99f7af916fa59a6f7f356394 # v2
      - name: Find latest Python
        id: baipp-latest
        run: |
          echo "supported_python_latest=$(echo '${{ steps.baipp.outputs.supported_python_classifiers_json_array }}' | jq -r -S '.[-1]')" >> "$GITHUB_OUTPUT"
    outputs:
      python-versions: ${{ steps.baipp.outputs.supported_python_classifiers_json_array }}
      python-latest: ${{ steps.baipp-latest.outputs.supported_python_latest }}
  check-types:
    name: Run type checker under Python ${{ matrix.python }} on ${{ matrix.os }}
    needs:
      - build-package
    runs-on: ${{ matrix.os }}
    environment:
      name: tests
    strategy:
      matrix:
        python: ${{ fromJson(needs.build-package.outputs.python-versions) }}
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: Install project
        run: |
          uv sync --no-dev --group=check-types --python ${{ matrix.python }}
      - name: Run Pyright
        uses: jakebailey/pyright-action@b5d50e5cde6547546a5c4ac92e416a8c2c1a1dfe # v2
        with:
          python-version: "${{ matrix.python }}"
  check:
    name: just ${{ matrix.receipt }}
    runs-on: ubuntu-latest
    environment:
      name: tests
    strategy:
      matrix:
        receipt:
          - pre-commit
          - lint
          - check-vulnerabilities
          - check-exceptions
          - check-code-maintainability
          - check-documentation-links
          - build-documentation
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Run the test suite
        run: |
          just ${{ matrix.receipt }}
      - name: Upload documentation
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4
        if: "${{ matrix.receipt == 'build-documentation' }}"
        with:
          name: documentation
          path: docs_build/
          overwrite: true
  test:
    name: Run tests under Python ${{ matrix.python }} on ${{ matrix.os }}
    needs:
      - check
      - check-types
      - build-package
    runs-on: ${{ matrix.os }}
    environment:
      name: tests
    strategy:
      matrix:
        python: ${{ fromJson(needs.build-package.outputs.python-versions) }}
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Download built packages from the build-package job
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: Packages
          path: dist
      - name: Run the test suite
        shell: bash
        run: |
          echo "REPORT_FILE=.just/test_report.md" >> "$GITHUB_ENV"
          just test-wheel ${{ matrix.python }} dist/*.whl
      - name: Output reports to the job summary when tests fail
        if: failure()
        shell: bash
        run: |
          if [ -f "$REPORT_FILE" ]; then
            echo "<details><summary>Failed Test Report</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload coverage data
        if: always()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python }}
          path: .just/.coverage.*
          overwrite: true
          include-hidden-files: true
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python }}
          path: .just/.junit-*.xml
          overwrite: true
          include-hidden-files: true
  container-deploy:
    name: Build Container
    needs:
      - build-package
    runs-on: ubuntu-latest
    environment:
      name: tests
    env:
      REGISTRY: ghcr.io
      PYTHON: "${{ needs.build-package.outputs.python-versions }}"
    strategy:
      matrix:
        image:
          - name: alpine
          - name: debian
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Download built packages from the build-package job
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: Packages
          path: dist
      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3
      - name: Set up Docker Metadata
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=pep440,pattern={{version}},event=tag
            type=ref,event=branch,prefix=latest-
            type=sha
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
      - name: Build
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6
        with:
          context: .
          file: ./container/Containerfile.${{ matrix.image.name }}
          tags: |
            ${{ steps.meta.outputs.tags }}-${{ matrix.image.name }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          cache-from: type=local,src=~/.docker/buildx-cache
          cache-to: type=local,dest=~/.docker/buildx-cache
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: coverage
    needs:
      - test
      - container-deploy
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Download coverage data
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: coverage-data-*
          merge-multiple: true
          path: .just/
      - name: Run coverage
        run: |
          just coverage-combine
          just coverage-report
          just coverage
          just coverage --format=markdown >> $GITHUB_STEP_SUMMARY
      - name: Upload coverage report to CodeCov
        if: always()
        uses: codecov/codecov-action@7f8b4b4bde536c465e797be725718b88c5d95e0e # v5
        with:
          name: codecov-umbrella
          verbose: true
          flags: pytest
          files: .just/.coverage.xml
          use_oidc: true
