# SPDX-License-IdentifierText: Â© 2024 The "Whiteprints" contributors <whiteprints@pm.me>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Build and test

on:
  workflow_call:
    inputs:
      target:
        description: Tests target
        type: string
        default: "['test-wheel', 'test-repository']"
        required: false
      python-version:
        description: Python versions to use (comma-separated). Use 'default' to autodetect.
        type: string
        default: "default"
        required: false
      os:
        description: Operating systems to use.
        type: string
        default: "['ubuntu-latest', 'macos-latest', 'windows-latest']"
        required: false
      strategy:
        description: Dependency resolution strategy
        type: string
        default: "['lowest', 'highest']"
        required: false
      container-image:
        description: Docker images to use.
        type: string
        default: "['debian', 'alpine']"
        required: false

jobs:
  build-package:
    name: Build and inspect package
    runs-on: ubuntu-latest
    environment:
      name: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Build and inspect package
        id: baipp
        uses: hynek/build-and-inspect-python-package@v2
      - name: Find latest Python
        id: baipp-latest
        run: |
          echo "supported_python_latest=$(echo '${{ steps.baipp.outputs.supported_python_classifiers_json_array }}' | jq -r -S '.[-1]')" >> "$GITHUB_OUTPUT"
    outputs:
      python-versions: ${{ steps.baipp.outputs.supported_python_classifiers_json_array }}
      python-latest: ${{ steps.baipp-latest.outputs.supported_python_latest }}

  check-types:
    name: Run type checker under Python ${{ matrix.python }} on ${{ matrix.os }}
    needs:
      - build-package
    runs-on: ${{ matrix.os }}
    environment:
      name: tests
    strategy:
      matrix:
        python: ${{ inputs.python-version != 'default' && fromJson(inputs.python-version) || fromJson(needs.build-package.outputs.python-versions) }}
        os: ${{ fromJson(inputs.os) }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true
      - name: Install project
        run: |
          uv sync --no-dev --group=check-types --python ${{ matrix.python }}
      - name: Run Pyright
        uses: jakebailey/pyright-action@v2
        with:
          python-version: "${{ matrix.python }}"

  check-code:
    name: just ${{ matrix.receipt }}
    runs-on: ubuntu-latest
    environment:
      name: tests
    strategy:
      matrix:
        receipt:
          - pre-commit
          - lint
          - check-vulnerabilities
          - check-exceptions
          - check-code-maintainability
          - check-documentation-links
          - build-documentation
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@b5f58b2abc5763ade55e4e9d0fe52cd1ff7979ca # v5
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Run the test suite
        run: |
          just ${{ matrix.receipt }}
      - name: Upload documentation
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        if: "${{ matrix.receipt == 'build-documentation' }}"
        with:
          name: documentation
          path: docs_build/
          overwrite: true

  test-wheel:
    name: Run tests against wheel under Python ${{ matrix.python }} on ${{ matrix.os }} with dependency resolution strategy ${{ matrix.strategy }}
    if: ${{ contains(fromJson(inputs.target), 'test-wheel') }}
    needs:
      - check-code
      - check-types
      - build-package
    runs-on: ${{ matrix.os }}
    environment:
      name: tests
    strategy:
      matrix:
        python: ${{ inputs.python-version != 'default' && fromJson(inputs.python-version) || fromJson(needs.build-package.outputs.python-versions) }}
        os: ${{ fromJson(inputs.os) }}
        strategy: ${{ fromJson(inputs.strategy )}}
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@b5f58b2abc5763ade55e4e9d0fe52cd1ff7979ca # v5
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Download built packages from the build-package job
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: Packages
          path: dist
      - name: Run the test suite
        shell: bash
        run: |
          echo "REPORT_FILE=.just/test_report.md" >> "$GITHUB_ENV"
          just test-wheel ${{ matrix.python }} dist/*.whl ${{ matrix.strategy }}
      - name: Output reports to the job summary when tests fail
        if: failure()
        shell: bash
        run: |
          if [ -f "$REPORT_FILE" ]; then
            echo "<details><summary>Failed Test Report</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload coverage data
        if: always()
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: coverage-data-test-wheel-${{ matrix.os }}-${{ matrix.python }}-${{ matrix.strategy }}
          path: .just/.coverage.*
          overwrite: true
          include-hidden-files: true
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: test-results-test-wheel-${{ matrix.os }}-${{ matrix.python }}-${{ matrix.strategy }}
          path: .just/.junit-*.xml
          overwrite: true
          include-hidden-files: true

  test-repository:
    name: Run tests against repository under Python ${{ matrix.python }} on ${{ matrix.os }}
    if: ${{ contains(fromJson(inputs.target), 'test-repository') }}
    needs:
      - check-code
      - check-types
      - build-package
    runs-on: ${{ matrix.os }}
    environment:
      name: tests
    strategy:
      matrix:
        python: ${{ inputs.python-version != 'default' && fromJson(inputs.python-version) || fromJson(needs.build-package.outputs.python-versions) }}
        os: ${{ fromJson(inputs.os) }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@b5f58b2abc5763ade55e4e9d0fe52cd1ff7979ca # v5
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Run the test suite
        shell: bash
        run: |
          echo "REPORT_FILE=.just/test_report.md" >> "$GITHUB_ENV"
          just test-repository ${{ matrix.python }}
      - name: Output reports to the job summary when tests fail
        if: failure()
        shell: bash
        run: |
          if [ -f "$REPORT_FILE" ]; then
            echo "<details><summary>Failed Test Report</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload coverage data
        if: always()
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: coverage-data-test-repository-${{ matrix.os }}-${{ matrix.python }}
          path: .just/.coverage.*
          overwrite: true
          include-hidden-files: true
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: test-results-test-repository-${{ matrix.os }}-${{ matrix.python }}
          path: .just/.junit-*.xml
          overwrite: true
          include-hidden-files: true

  build-container:
    name: Build Container
    needs:
      - build-package
    runs-on: ubuntu-latest
    environment:
      name: tests
    env:
      REGISTRY: ghcr.io
      PYTHON: "${{ needs.build-package.outputs.python-versions }}"
    strategy:
      matrix:
        image: ${{ fromJson(inputs.container-image) }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Download built packages from the build-package job
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: Packages
          path: dist
      - name: Set up QEMU
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3
      - name: Set up Docker Metadata
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=pep440,pattern={{version}},event=tag
            type=ref,event=branch,prefix=latest-
            type=sha
      - name: Set BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
      - name: Build
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # v6
        with:
          context: .
          file: ./container/Containerfile.${{ matrix.image }}
          tags: |
            ${{ steps.meta.outputs.tags }}-${{ matrix.image }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          cache-from: type=local,src=~/.docker/buildx-cache
          cache-to: type=local,dest=~/.docker/buildx-cache

  coverage:
    name: Merge coverage
    runs-on: ubuntu-latest
    environment:
      name: tests
    needs:
      - test-repository
      - test-wheel
      - build-container
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@b5f58b2abc5763ade55e4e9d0fe52cd1ff7979ca # v5
        with:
          version: "latest"
          enable-cache: true
      - name: Install just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Download coverage data
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: coverage-data-*
          merge-multiple: true
          path: .just/
      - name: Run coverage
        run: |
          just coverage-combine
      - name: Upload coverage
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: .coverage
          path: |
            .just/.coverage
          overwrite: true
          include-hidden-files: true
