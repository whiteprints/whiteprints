# SPDX-FileCopyrightText: Â© 2024 The "Whiteprints" contributors <whiteprints@pm.me>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Upload Release Artifacts

on:
  push:
    # branches to consider in the event; optional, defaults to all
    tags:
      - "v*.*.*"

jobs:
  build-package:
    name: Build and inspect package
    runs-on: ubuntu-latest
    environment:
      name: artifacts
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set TAG
        id: vars
        shell: python
        run: |
          import os
          ref = os.getenv('GITHUB_REF', '')
          tag = ref.split('/')[-1] if ref else ''
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as file:
              file.write(f'tag={tag}\n')
      - name: Build and inspect package
        id: baipp
        uses: hynek/build-and-inspect-python-package@f01e4d047aadcc0c054c95ec9900da3ec3fc7a0f # v2
        with:
          attest-build-provenance-github: true
    outputs:
      python-versions: ${{ steps.baipp.outputs.supported_python_classifiers_json_array }}
  release-package:
    name: Upload wheel and sdist
    runs-on: ubuntu-latest
    needs:
      - build-package
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Download built artifact to dist/
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: Packages
          path: dist
      - name: Upload dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.vars.outputs.tag }} dist/** --clobber
  docs-generation:
    name: Upload documentation
    runs-on: ubuntu-latest
    environment:
      name: artifacts
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set TAG
        id: vars
        shell: python
        run: |
          import os
          ref = os.getenv('GITHUB_REF', '')
          tag = ref.split('/')[-1] if ref else ''
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as file:
              file.write(f'tag={tag}\n')
      - name: Install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: Build docs
        run: |
          uvx --quiet --no-progress --with tox-uv tox run -e build-documentation
          zip -r documentation.zip docs_build
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@c4fbc648846ca6f503a13a2281a5e7b98aa57202 # v2
        with:
          subject-path: documentation.zip*
      - name: Upload docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.vars.outputs.tag }} documentation.zip* --clobber
  sbom-vulnerabilities-generation:
    name: Generate SBOM under Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment:
      name: artifacts
    needs:
      - build-package
    strategy:
      matrix:
        python: ${{ fromJson(needs.build-package.outputs.python-versions) }}
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set TAG
        id: vars
        shell: python
        run: |
          import os
          ref = os.getenv('GITHUB_REF', '')
          tag = ref.split('/')[-1] if ref else ''
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as file:
              file.write(f'tag={tag}\n')
      - name: Install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: Pick environment to run
        run: |
          import os
          python_version = "${{ matrix.python }}".split(".")
          tox_env = f"TOXENV=py{python_version[0]}{python_version[1]}-BOM-vulnerabilities\n"
          py_version = f"PYVERSION=py{python_version[0]}{python_version[1]}\n"
          env_variables = tox_env + py_version
          with open(os.environ["GITHUB_ENV"], mode="a", encoding="utf-8") as file_handler:
              file_handler.write(env_variables)
        shell: python
      - name: SBOM generation
        run: |
          uvx --quiet --no-progress --with tox-uv tox run
      - name: Upload BOM vulnerabilities
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: BOM-vulnerabilities-${{ matrix.os }}-${{ matrix.python }}
          path: BOM/
          overwrite: true
  sbom-publication:
    name: Publish SBOM
    runs-on: ubuntu-latest
    environment:
      name: artifacts
    needs:
      - sbom-vulnerabilities-generation
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set TAG
        id: vars
        shell: python
        run: |
          import os
          ref = os.getenv('GITHUB_REF', '')
          tag = ref.split('/')[-1] if ref else ''
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as file:
              file.write(f'tag={tag}\n')
      - name: Install uv
        uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
        with:
          version: "latest"
          enable-cache: true
      - name: Download coverage data
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: BOM-vulnerabilities-*
          merge-multiple: true
          path: BOM/
      - name: Pick environment to run
        run: |
          import os
          env_variables = f"TOXENV=BOM-licenses\n"
          with open(os.environ["GITHUB_ENV"], mode="a", encoding="utf-8") as file_handler:
              file_handler.write(env_variables)
        shell: python
      - name: SBOM generation
        run: |
          uvx --quiet --no-progress --with tox-uv tox run
      - name: Create BOM Archive
        shell: python
        run: |
          import zipfile, os
          from pathlib import Path

          with zipfile.ZipFile('SBOM.zip', 'w') as zipf:
              for f in Path('BOM').rglob('*'):
                  zipf.write(f, f.relative_to('BOM'))
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@c4fbc648846ca6f503a13a2281a5e7b98aa57202 # v2
        with:
          subject-path: SBOM.zip*
      - name: Upload SBOM as Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.vars.outputs.tag }} SBOM.zip* --clobber
