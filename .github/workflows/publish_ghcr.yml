# SPDX-FileCopyrightText: Â© 2024 The "Whiteprints" contributors <whiteprints@pm.me>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Publish container

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9].post'
      - 'v[0-9]+.[0-9]+.[0-9].post[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9].post.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-pre-alpha'
      - 'v[0-9]+.[0-9]+.[0-9]+-pre-alpha[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-pre-alpha.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-pre-alpha[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-planning'
      - 'v[0-9]+.[0-9]+.[0-9]+-planning[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-planning.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-planning[0-9]+.[0-9]+'

jobs:
  container-deploy:
    name: Build and Push Container
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    environment:
      name: "${{ (contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-pre-alpha') || contains(github.ref, '-planning')) && 'publish_testghcr' || 'publish_ghcr' }}"
    env:
      REGISTRY: ghcr.io
    strategy:
      matrix:
        image:
          - name: alpine
            python: 3.12
            base: alpine3.20
            digest: "sha256:aeff64320ffb81056a2afae9d627875c5ba7d303fb40d6c0a43ee49d8f82641c"
          - name: debian
            python: 3.12
            base: slim-bookworm
            digest: "sha256:c24c34b502635f1f7c4e99dc09a2cbd85d480b7dcfd077198c6b5af138906390"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker Metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          flavor: |
            latest=auto
            prefix=
            suffix=-${{ matrix.image.base }}
          tags: |
            type=pep440,pattern={{ version }},event=tag
            type=ref,event=tag
            type=sha
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
      - name: Build and Push Container
        uses: docker/build-push-action@v6
        id: build-and-push
        with:
          context: .
          file: ./container/Containerfile.${{ matrix.image.name }}
          tags: |
            ${{ steps.docker-meta.outputs.tags }}
          annotations: ${{ steps.docker-meta.outputs.annotations }}
          build-args: |
            PYTHON_VERSION=${{ matrix.image.python }}
            BASE_OS=${{ matrix.image.base }}
            DIGEST=${{ matrix.image.digest }}
            VERSION=${{ steps.docker-meta.outputs.version }}
            REVISION=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          push: true
          cache-from: type=local,src=~/.docker/buildx-cache
          cache-to: type=local,dest=~/.docker/buildx-cache
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.docker-meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
